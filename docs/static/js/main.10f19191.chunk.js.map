{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","elem","preventDefault","console","log","trim","length","cats","value","onChange","target","handleInputChange","getGifs","category","a","url","encodeURIComponent","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mNAIaA,EAAc,SAAC,GAItB,IAFEC,EAEH,EAFGA,cAEH,EAEmCC,mBAAS,IAF5C,mBAEMC,EAFN,KAEkBC,EAFlB,KAwBD,OACI,sBAAMC,SAhBW,SAACC,GAClBA,EAAKC,iBACLC,QAAQC,IAAI,UACRN,EAAWO,OAAOC,OAAO,IAEzBV,GAAc,SAAAW,GAAI,OAAMT,GAAN,mBAAoBS,OAEtCR,EAAc,MASlB,SAEI,uBAAOS,MAAOV,EAAYW,SAAU,SAACR,GAAD,OAvBlB,SAACA,GAEvBF,EAAcE,EAAKS,OAAOF,OAqBwBG,CAAkBV,S,+BCjC/DW,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,mBAAmBH,GADtD,8DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAGDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAM1CZ,QAAQC,IAAIiB,GAjBO,kBAoBZA,GApBY,4CAAH,sDCAPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAMrC,OACI,sBAAKc,UAAU,kDAAf,UAEI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCPHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECDX,SAACA,GAAa,MAGZhB,mBAAS,CAC/BuB,KAAM,GACNa,SAAS,IALyB,mBAG/BC,EAH+B,KAGxBC,EAHwB,KAwBtC,OAhBAC,qBAAW,WAEPxB,EAAQC,GAAUwB,MAAM,SAAAC,GAEhBH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAKtB,CAAEpB,IAKEqB,EDpB0BK,CAAa1B,GAAjCa,EAHsB,EAG3BN,KAAaa,EAHc,EAGdA,QAoBrB,OAjBA9B,QAAQC,IAAI6B,GAkBR,qCACI,6BAAKpB,IAEJoB,GAAW,yCACZ,6BAEQP,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEhCxBgB,EAAgB,SAAC,GACvB,eAAD,MAOkC3C,mBAAS,CAAC,SAP5C,mBAOK4C,EAPL,KAOiB7C,EAPjB,KAiBF,OAAS,qCACL,oBAAIiC,UAAU,4CAAd,0BAEA,cAAC,EAAD,CAAajC,cAAeA,IAC5B,uBAII,6BAOQ6C,EAAWnB,KAAK,SAAAT,GAAQ,OAAI,cAAC,EAAD,CAAwBA,SAAWA,GAArBA,YClC9D6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.10f19191.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\n\n\nexport const AddCategory = (\n    {\n        setCategories\n    }\n) => {\n\n    const [inputValue, setinputValue] = useState('');\n\n    const handleInputChange = (elem) => {\n        // console.log(elem.target.value);\n        setinputValue(elem.target.value); // en todo momento se tiene el  input value actualizado\n    }\n\n    const handleSubmit = (elem) => {\n        elem.preventDefault(); // previene submit con enter\n        console.log('submit');\n        if (inputValue.trim().length>2) {\n            //llama a función de GifExpertApp para establecer categorías\n            setCategories(cats => [ inputValue,...cats]);\n            \n            setinputValue('');\n        }\n\n\n    }\n\n\n    // debe regresar elementos agrupados, no hay necesidad de fragment siempre\n    return (\n        <form onSubmit={ handleSubmit}>\n            {/* <h2>Para ver que en todo momento se mantiene el input actualizado: {inputValue}</h2> */}\n            <input value={inputValue} onChange={(elem) => handleInputChange(elem)} />\n        </form>\n    )\n}\n\n// Declaración de propiedades para el componente\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","\n\nexport const getGifs = async(category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURIComponent(category)}&api_key=GRPS7a9MapYilEebqFykUVla17nsvT2G&limit=3`;\n    const resp = await fetch(url);\n\n    const {data} = await resp.json(); // se destructura porque hay un elemento data dentro de data\n    // console.log(data);\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    });\n\n    // console.log(gifs);\n\n    console.log(gifs); // nuevo estado para state \n\n    // regresa una promesa que resuelkve la colección de gfis\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ({ id, title, url }) => {\n// export const GifGridItem = (img) => {\n    // console.log(img);\n\n\n    // Usa index.css class\n    return (\n        <div className=\"card animate__animated animate__fadeInRightBig \">\n            {/* {img.title} */}\n            <img src={url} alt={title}></img>\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React, { useState, useEffect } from 'react'\nimport { getGifs } from '../helpers/getGifs';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({category}) => {\n\n    // se renombra data a images en la destructuración\n    const { data:images, loading } = useFetchGifs(category);\n\n    // console.log(data);\n    console.log(loading);\n\n    // const [images, setImages] = useState([]);\n\n    // // const [count, setCount] = useState(0);\n\n    // // useEffect sin dependencias [] se va a disparar una única vez,\n    // // no cada vez que se renderize el componente por una modificación de setState (setCount)\n    // useEffect( () => {\n    //     // getGifs(category).then( imgs => setImages(imgs) ) ;\n    //     getGifs(category).then(setImages ) ;\n    // }, [ category ]);  // se evalúa solo cuando la categoría cambia\n\n\n\n    // getGifs(); // se comenta al usar useeffect\n\n    return (\n        <>\n            <h3>{category}</h3>\n            {/* Lo siguiente para no hacer un operador ternario */}\n            {loading && <p>Cargando</p> }\n            <ol>\n                {\n                    images.map( img => (\n                        <GifGridItem \n                            key={img.id}\n                            {...img}\n                        />\n                    ))\n                }\n            </ol>\n\n        </>\n\n    );\n}\n","import { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n// no son más que funciones\n\nexport const useFetchGifs = (category) => {\n    \n    // retorna state\n    const [state, setstate] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( () => {\n        // getGifs(category).then( imgs => setImages(imgs) ) ;\n        getGifs(category).then( imgs => { \n            // setTimeout(() => {\n                setstate({\n                    data: imgs,\n                    loading: false\n                });\n            // }, 3000);\n        });\n\n    }, [ category ]);  // se evalúa solo cuando la categoría cambia\n\n\n\n\n    return state;\n\n\n\n}\n","import React, { useState } from 'react'; // 'use' quiere decir que es un hook\nimport PropTypes from 'prop-types';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp =  ({\n}) => {\n\n    // const categories = ['One Punch', 'Samurai x', 'Gokú'];\n\n\n    // Se declara categoríes, con el contenido de useState\n    // setcategories se puede utilizar para controlar el estado y renderizar\n    const [categories, setCategories] = useState(['Goku']);\n\n    // agrega un elemento al arreglo categorias\n    // const handleAdd = () => {\n    \n    //     // setCategories( [...categories, 'Hnter'] ); // son ==\n    //     setCategories( cats => [...categories, 'hunter']); // son ==\n        \n    // };\n\n    return ( <>\n        <h2 className=\"animate__animated animate__fadeInTopLeft \">GifExpertApp</h2>\n        {/* renderizo addcategory y se env+ia referencia a setCategories */}\n        <AddCategory setCategories={setCategories} /> \n        <hr />\n\n        {/* <button onClick={ handleAdd } >Agregar</button> */}\n        {\n            <ol>\n                {\n                    // categories.map( (category, i) => {\n                    //     return <li key={category}>{category}</li>;\n                    // })\n\n                    // categories.map( category => <li key={category}>{category}</li>)\n                    categories.map( category => <GifGrid key={category} category ={category} />)\n                }\n            </ol>\n        }\n        </>);\n\n\n}\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport  {GifExpertApp} from \"./GifExpertApp\";\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}